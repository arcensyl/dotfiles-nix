{ lib, config, pkgs, vars, ... }:

let
  cfg = config.apps.editors;
  colors = config.lib.stylix.colors.withHashtag;
in {
  options.apps.editors.nvim.enable =
      lib.mkEnableOption "my Neovim configuration";

  options.apps.editors.emacs = {
    enable =
      lib.mkEnableOption "Emacs, the hackable text editor";

    daemon.enable =
      lib.mkEnableOption "the Emacs daemon and alias the default command to call its client";
  };

  config.home-manager.users."${vars.master.name}" = {
    programs.neovim = lib.mkIf cfg.nvim.enable {
      enable = true;
      defaultEditor = true;
    };

    programs.emacs = lib.mkIf cfg.emacs.enable {
      enable = true;
      package = pkgs.emacs-gtk;
    };

    services.emacs.enable = cfg.emacs.daemon.enable;

    home.shellAliases = lib.mkIf cfg.emacs.daemon.enable { emacs = "emacsclient -c"; };

    # Installs Ripgrep and FD so my Emacs config can use it.
    programs.ripgrep.enable = cfg.emacs.enable;
    programs.fd.enable = cfg.emacs.enable;

    # Installs various packages used by my editors.
    home.packages = with pkgs; [
      gcc # Needed so Emacs can compile TS grammars
      unzip # Needed for Dirvish's archive preview.
      imagemagick # Needed for Dirvish's image preview.
      ffmpegthumbnailer # Needed for Dirvish's video preview.
      mediainfo # Needed for Dirvish's media metadata preview.
      poppler # Needed for Dirvish's PDF preview.
      enchant # Needed for the Jinx spell-checker.
      emacsPackages.jinx # Spell-checker for Emacs; installed with Nix so it can find Enchant.
      hunspell # The actual backend that Jinx will use.
      hunspellDicts.en_US # The basic English dictionary for use with Hunspell.
	  emacs-lsp-booster # Companion program to speed-up Emacs's LSP support.
    ];

    home.file.emacs-stylix = {
      target = ".dotfiles/nix/gen/base16-stylix-theme.el";
      text = ''
        ;;; base16-stylix-theme   -*- lexical-binding: t; -*-

        ;; Author: Stylix <AUTO>
        ;; Keywords: theme
        ;; Version: 0.0.1

        ;;; Commentary:

        ;; This package provides a theme automatically generated by Stylix.

        ;;; Code:
        (require 'base16-theme)

        (defvar base16-stylix-theme-colors
          '(:base00 "${colors.base00}"
            :base01 "${colors.base01}"
            :base02 "${colors.base02}"
            :base03 "${colors.base03}"
            :base04 "${colors.base04}"
            :base05 "${colors.base05}"
            :base06 "${colors.base06}"
            :base07 "${colors.base07}"
            :base08 "${colors.base08}"
            :base09 "${colors.base09}"
            :base0A "${colors.base0A}"
            :base0B "${colors.base0B}"
            :base0C "${colors.base0C}"
            :base0D "${colors.base0D}"
            :base0E "${colors.base0E}"
            :base0F "${colors.base0F}")
          "All the colors for Stylix's Emacs theme.")

        (deftheme base16-stylix)

        (base16-theme-define 'base16-stylix base16-stylix-theme-colors)

        (provide-theme 'base16-stylix)

        (add-to-list 'custom-theme-load-path (file-truename "~/.dotfiles/nix/gen/"))

        (provide 'base16-stylix-theme)
        ;;; base16-stylix-theme.el ends here
      '';
    };

    wayland.windowManager.hyprland.settings = lib.mkIf (cfg.emacs.enable && config.de.hypr.enable) {
      bind = [ "CTRL ALT, T, exec, emacsclient -r" ];
    };
  };
}
